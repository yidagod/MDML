{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcaeef07-98bd-4673-91bd-fb8744efca1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 导入必要的库\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from xgboost import XGBClassifier\n",
    "from econml.dml import LinearDML\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "import joblib\n",
    "\n",
    "# 加载模型\n",
    "xgb_model = joblib.load('xgb_model.pkl')\n",
    "dml = joblib.load('dml_model.pkl')\n",
    "\n",
    "# 加载数据（用于获取特征名称和范围）\n",
    "data = pd.read_excel('因果效应估计数据 - 副本.xlsx')\n",
    "\n",
    "# 初始化特征输入\n",
    "def init_input_features():\n",
    "    input_features = {}\n",
    "    for col in data.columns:\n",
    "        if col == 'event':\n",
    "            continue\n",
    "        dtype = data[col].dtype\n",
    "        if dtype == 'int64':\n",
    "            min_val, max_val = data[col].min(), data[col].max()\n",
    "            input_features[col] = st.sidebar.slider(col, int(min_val), int(max_val), int(data[col].mean()))\n",
    "        elif dtype == 'float64':\n",
    "            min_val, max_val = data[col].min(), data[col].max()\n",
    "            input_features[col] = st.sidebar.slider(col, float(min_val), float(max_val), float(data[col].mean()))\n",
    "        else:  # 类别型变量\n",
    "            unique_vals = data[col].unique()\n",
    "            input_features[col] = st.sidebar.selectbox(col, unique_vals)\n",
    "    return input_features\n",
    "\n",
    "# 主应用\n",
    "def main():\n",
    "    st.title('健康风险预测与因果效应分析')\n",
    "    \n",
    "    # 输入特征\n",
    "    input_features = init_input_features()\n",
    "    input_df = pd.DataFrame([input_features])\n",
    "    \n",
    "    # 预测发病风险\n",
    "    if st.button('预测发病风险'):\n",
    "        pred_prob = xgb_model.predict_proba(input_df)[:, 1][0]\n",
    "        st.write(f'当前发病风险: {pred_prob:.2f}')\n",
    "        \n",
    "        # 计算因果效应（假设处理变量是 'exercise'）\n",
    "        effect = dml.effect(input_df.drop(columns=['exercise']).values, T0=0, T1=input_df['exercise'])[0]\n",
    "        st.write(f'锻炼对发病风险的影响: {effect:.2f}')\n",
    "        \n",
    "        # 可视化不同锻炼频率下的风险变化\n",
    "        fig = go.Figure()\n",
    "        exercise_values = np.arange(0, 4)  # 假设锻炼频率取值范围是0到3\n",
    "        risks = []\n",
    "        for ex in exercise_values:\n",
    "            temp_df = input_df.copy()\n",
    "            temp_df['exercise'] = ex\n",
    "            pred = xgb_model.predict_proba(temp_df)[:, 1][0]\n",
    "            risks.append(pred)\n",
    "        \n",
    "        fig.add_trace(go.Scatter(x=exercise_values, y=risks, mode='lines+markers'))\n",
    "        fig.update_layout(title='锻炼频率对发病风险的影响', xaxis_title='锻炼频率', yaxis_title='发病风险')\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
